version: '3.7'
services:
  # SERVICES
  deployment-rest-api:
    container_name: rest-api
    profiles:
      - services
    build:
      context: ../services/rest-api
      dockerfile: ../../dockerfiles/Dockerfile.distroless
    deploy:
      resources:
        limits:
          memory: 256M
    env_file: services/rest-api/.env
    ports:
      - '8080:8080'
      - '5005:5005'
    depends_on:
      - postgres
      - artemis
    networks:
      - default
  deployment-aggregator:
    container_name: aggregator
    profiles:
      - services
    build:
      context: ../services/aggregator
      dockerfile: ../../dockerfiles/Dockerfile.distroless
    deploy:
      resources:
        limits:
          memory: 256M
    env_file: services/aggregator/.env
    ports:
      - '8081:8081'
      - '5006:5005'
    depends_on:
      - postgres
      - artemis
    networks:
      - default

  # DEBUG SERVICES - WITH REMOTE DEV CAPABILITIES
  debug-rest-api:
    container_name: rest-api
    profiles:
      - debug-services
    build:
      context: ../services/rest-api
      dockerfile: ../../dockerfiles/Dockerfile.distroless
    env_file: services/rest-api/.dev.env
    ports:
      - '8080:8080'
      - '5005:5005'
    depends_on:
      - postgres
      - artemis
    networks:
      - default
  debug-aggregator:
    container_name: aggregator
    profiles:
      - debug-services
    build:
      context: ../services/aggregator
      dockerfile: ../../dockerfiles/Dockerfile.distroless
    env_file: services/aggregator/.dev.env
    ports:
      - '8081:8080'
      - '5006:5005'
    depends_on:
      - postgres
      - artemis
    networks:
      - default

  # NATIVE SERVICES
  native-rest-api:
    container_name: rest-api
    profiles:
      - native-services
    build:
      context: ../services/rest-api
      dockerfile: ../../dockerfiles/Dockerfile.native
    deploy:
      resources:
        limits:
          memory: 128M
    env_file: services/rest-api/.env
    command:
      - -XX:MaximumHeapSizePercent=10
      - -XX:MaximumYoungGenerationSizePercent=5
    ports:
      - '8080:8080'
    depends_on:
      - postgres
      - artemis
    networks:
      - default
  native-aggregator:
    container_name: aggregator
    profiles:
      - native-services
    build:
      context: ../services/aggregator
      dockerfile: ../../dockerfiles/Dockerfile.native
    deploy:
      resources:
        limits:
          memory: 128M
    env_file: services/aggregator/.env
    command:
      - -XX:MaximumHeapSizePercent=10
      - -XX:MaximumYoungGenerationSizePercent=5
    ports:
      - '8081:8080'
      - '5006:5005'
    depends_on:
      - postgres
      - artemis
    networks:
      - default

  # postgres + pgadmin4 web UI
  postgres:
    # 14.3
    image: postgres@sha256:5ea2da1f0275e38a6f39735b48a3688aae6ddfa2ad15971722d6fc0f2152918b
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/:ro
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_MULTIPLE_DATABASES: upload
    ports:
      - "5432:5432"
    networks:
      - default
      - database
  pgadmin4:
    # 6.9
    image: dpage/pgadmin4@sha256:f0cfeddcbc9fb195b8447d345e5a4e5fe8f50faea5678c9ba32f923f1e0536e9
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/pgadmin4/pgadmin4/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    ports:
      - "8091:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: pgadmin4
    networks:
      - database

  # apache activemq-artemis
  artemis:
    image: vromero/activemq-artemis:2.16.0-alpine@sha256:2621ab238411031e364cc219c621f20a6613efc3a91b43c85148e8872e6b3163
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/artemis/var/lib/artemis/etc-override:/var/lib/artemis/etc-override/:ro
    ports:
      - "8161:8161"
      - "61616:61616"
      - "5672:5672"
    environment:
      ARTEMIS_USERNAME: artemis
      ARTEMIS_PASSWORD: artemis

  # jaeger
  jaeger:
    # 1.35.1
    image: jaegertracing/all-in-one@sha256:f111f6ced1d3cc38eb102e278a87470644dba005c838f34ae92e375ab4bc21a4
    ports:
      - "14268:14268"
      - "16686:16686"

  # prometheus & grafana
  prometheus:
    # v2.36.0
    image: prom/prometheus@sha256:c833de2399020386dc1e886363467f60b7f8e404aef5eaa7a757d6968cf5147b
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/prometheus/etc/prometheus:/etc/prometheus:ro
    networks:
      - default
      - monitoring
  grafana:
    # 8.5.4
    image: grafana/grafana@sha256:4efae4ef2855ec221836f65061be390fd9267ca63945b68a4e136ddcd430f005
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/grafana/etc/grafana/provisioning:/etc/grafana/provisioning:ro
      - ${REMOTE_PROJECT_PATH:-.}/grafana/etc/dashboards:/etc/dashboards
    environment:
      GF_SECURITY_ADMIN_USER: grafana
      GF_SECURITY_ADMIN_PASSWORD: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring

  # ELK-stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    networks: 
      - logging
  logstash:
    image: docker.elastic.co/logstash/logstash-oss:7.10.2
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/logstash/usr/share/logstash/pipelines:/usr/share/logstash/pipeline:ro
    depends_on:
      - elasticsearch
    ports:
      - "12201:12201/udp"
      - "5000:5000"
      - "9600:9600"
    networks: 
      - default
      - logging
  kibana:
    image: docker.elastic.co/kibana/kibana-oss:7.10.2
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks: 
      - logging

networks:
  default:
  database:
  monitoring:
  logging: