version: "3.7"
services:
  # SERVICES
  deployment-rest-api:
    container_name: s4-rest-api
    profiles:
      - services
    build:
      context: ../services/rest-api
      dockerfile: ../../dockerfiles/Dockerfile.quarkus-distroless
    deploy:
      resources:
        limits:
          memory: 256M
    env_file: services/rest-api/.env
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      - postgres
      - artemis
    networks:
      - default
  deployment-aggregator:
    container_name: s4-aggregator
    profiles:
      - services
    build:
      context: ../services/aggregator
      dockerfile: ../../dockerfiles/Dockerfile.quarkus-distroless
    deploy:
      resources:
        limits:
          memory: 256M
    env_file: services/aggregator/.env
    ports:
      - "8081:8081"
      - "5006:5005"
    depends_on:
      - postgres
      - artemis
    networks:
      - default

  # DEBUG SERVICES - WITH REMOTE DEV CAPABILITIES
  debug-rest-api:
    container_name: s4-rest-api
    profiles:
      - debug-services
    build:
      context: ../services/rest-api
      dockerfile: ../../dockerfiles/Dockerfile.quarkus-distroless
    env_file: services/rest-api/.dev.env
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      - postgres
      - artemis
    networks:
      - default
  debug-aggregator:
    container_name: s4-aggregator
    profiles:
      - debug-services
    build:
      context: ../services/aggregator
      dockerfile: ../../dockerfiles/Dockerfile.quarkus-distroless
    env_file: services/aggregator/.dev.env
    ports:
      - "8081:8080"
      - "5006:5005"
    depends_on:
      - postgres
      - artemis
    networks:
      - default

  # NATIVE SERVICES
  native-rest-api:
    container_name: s4-rest-api
    profiles:
      - native-services
    build:
      context: ../services/rest-api
      dockerfile: ../../dockerfiles/Dockerfile.native-distroless
    deploy:
      resources:
        limits:
          memory: 48M
    env_file: services/rest-api/.env
    command:
      - -XX:MaximumHeapSizePercent=10
      - -XX:MaximumYoungGenerationSizePercent=5
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - artemis
    networks:
      - default
  native-aggregator:
    container_name: s4-aggregator
    profiles:
      - native-services
    build:
      context: ../services/aggregator
      dockerfile: ../../dockerfiles/Dockerfile.native-distroless
    deploy:
      resources:
        limits:
          memory: 48M
    env_file: services/aggregator/.env
    command:
      - -XX:MaximumHeapSizePercent=10
      - -XX:MaximumYoungGenerationSizePercent=5
    ports:
      - "8081:8080"
      - "5006:5005"
    depends_on:
      - postgres
      - artemis
    networks:
      - default

  # TESTS
  citrus-continuous:
    container_name: s4-citrus-continuous
    profiles:
      - tests
    build:
      context: ../citrus-tests/continuous
      dockerfile: ../../dockerfiles/Dockerfile.distroless
    env_file: citrus/continuous/.env
    entrypoint:
      - "java"
      - "-Dlog4j.configurationFile=classpath:log4j2-json.properties"
      - "-jar"
      - "app.jar"
      - "--engine"
      - "testng"
      - "--test"
      - "de.consol.dus.s4.citrus.tests.continuous.UploadIT"
      - "--duration"
      - "2147483647"
    ports:
      - "4567:4567"
    networks:
      - default

  # postgres + pgadmin4 web UI
  postgres:
    container_name: s4-postgres
    # 14.3
    image: docker.io/postgres:15.2-alpine3.17
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d/:ro
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_MULTIPLE_DATABASES: upload
    ports:
      - "5432:5432"
    networks:
      - default
      - database
  pgadmin4:
    container_name: s4-pgadmin4
    # 6.9
    image: docker.io/dpage/pgadmin4:7.0
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/pgadmin4/pgadmin4/servers.json:/pgadmin4/servers.json:ro
    depends_on:
      - postgres
    ports:
      - "8091:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: pgadmin4
    networks:
      - database

  # apache activemq-artemis
  artemis:
    container_name: s4-artemis
    image: quay.io/artemiscloud/activemq-artemis-broker-kubernetes:1.0.17
    ports:
      - "8161:8161"
      - "61616:61616"
      - "5672:5672"
    environment:
      AMQ_USER: doesnot
      AMQ_PASSWORD: matter
      AMQ_ADDRESSES: upload-ready-for-processing
      AMQ_EXTRA_ARGS: --relax-jolokia
    networks:
      - default

  otel-collector:
    container_name: s4-otel-collector
    image: docker.io/otel/opentelemetry-collector:0.75.0
    command: [ "--config=/etc/otel-collector-config.yml" ]
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/otel-collector/etc/otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    ports:
      - "13133:13133" # Health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55680:55680" # OTLP gRPC receiver alternative port
      - "9999:9999"   # Metrics
    depends_on:
      - jaeger
    networks:
      - default
      - observability

  # jaeger & otel collector
  jaeger:
    container_name: s4-jaeger
    image: docker.io/jaegertracing/all-in-one:1.44.0
    ports:
      - "14268:14268"
      - "14250:14250"
      - "16686:16686"
    networks:
      - observability

  # prometheus, tempo & grafana
  prometheus:
    container_name: s4-prometheus
    image: docker.io/prom/prometheus:v2.43.0
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/prometheus/etc/prometheus:/etc/prometheus:ro
    networks:
      - observability

  tempo:
    container_name: s4-tempo
    image: docker.io/grafana/tempo:2.1.1
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/tempo/etc/tempo.yml:/etc/tempo.yml:ro
    networks:
      - observability

  grafana:
    container_name: s4-grafana
    image: docker.io/grafana/grafana:9.5.1
    volumes:
      - ${REMOTE_PROJECT_PATH:-.}/grafana/etc/grafana/provisioning:/etc/grafana/provisioning:ro
      - ${REMOTE_PROJECT_PATH:-.}/grafana/etc/dashboards:/etc/dashboards
    environment:
      GF_SECURITY_ADMIN_USER: grafana
      GF_SECURITY_ADMIN_PASSWORD: grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
      - tempo
    networks:
      - observability

  # ELK-stack
  elasticsearch:
    container_name: s4-elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:${ELK_VERSION}
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    networks:
      - logging
      - observability
  logstash:
    container_name: s4-logstash
    image: docker.elastic.co/logstash/logstash-oss:${ELK_VERSION}
    volumes:
      - source: ${REMOTE_PROJECT_PATH:-.}/logstash/usr/share/logstash/pipeline
        target: /usr/share/logstash/pipeline
        type: bind
        read_only: true
    depends_on:
      - elasticsearch
    ports:
      - "12201:12201/udp"
      - "5000:5000"
      - "5044:5044"
      - "9600:9600"
    networks:
      - logging
  kibana:
    container_name: s4-kibana
    image: docker.elastic.co/kibana/kibana-oss:${ELK_VERSION}
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    networks:
      - logging
  filebeat:
    container_name: s4-filebeat
    image: docker.elastic.co/beats/filebeat-oss:${ELK_VERSION}
    user: root
    volumes:
      - source: ${REMOTE_PROJECT_PATH:-.}/filebeat/usr/share/filebeat/filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
        type: bind
        read_only: true
      - source: ${CONTAINERS_DIR:-/var/lib/containers}
        target: /var/lib/containers
        type: bind
        read_only: true
      - source: ${DOCKER_SOCK_PATH:-/var/run/docker.sock}
        target: /var/run/docker.sock
        type: bind
    command: [ "-e", "-strict.perms=false" ]
    networks:
      - logging
    depends_on:
      - logstash

networks:
  default:
    driver: bridge
  database:
  logging:
  observability:
